{"version":3,"sources":["components/Navigation.js","../../src/index.js","screens/Basic.js","screens/Nested.js","App.js","index.js"],"names":["Navigation","Box","height","display","justifyContent","Button","variant","as","RouterLink","to","validationSchema","useState","type","parseInt","useEffect","compare","formData","setFormData","initialValues","hasErrors","Object","error","errorState","areFieldsValidated","v","setOnSubmitCalled","isOnSubmitCalled","callBack","setErrors","setTouched","nestedSchemaObject","schemaObject","value","acc","nestedValue","nestedAcc","validationSchemaObject","a","e","name","fieldSchema","object","prevState","message","id","getValueByType","handleValidateSchema","isObject","Array","isArray","handleValidateArrayField","target","nestedKey","handleValidateField","key","newArray","currentValue","data","field","errors","Basic","useFieldValidationForm","email","password","string","required","min","outputValues","console","log","formErrors","handleChange","handleSubmit","method","onSubmit","FormLabel","htmlFor","Input","onChange","onBlur","Nested","user","App","maxWidth","margin","exact","path","ReactDOM","render","ThemeProvider","ColorModeProvider","CSSReset","document","getElementById"],"mappings":"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","file":"static/js/main.4e8fb39b.chunk.js","sourcesContent":["import { Button, Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nfunction Navigation() {\n  return (\n    <>\n      <Box height='2' />\n      <Box display='flex' justifyContent='space-around'>\n        <Button\n          variant='link'\n          as={RouterLink}\n          to='/react-field-validation-form'\n        >\n          Basic\n        </Button>\n        <Button\n          variant='link'\n          as={RouterLink}\n          to='/react-field-validation-form/nested'\n        >\n          Nested\n        </Button>\n      </Box>\n      <Box height='2' />\n    </>\n  )\n}\n\nexport default Navigation\n","import compare from 'just-compare'\nimport { useEffect, useState } from 'react'\nimport { object } from 'yup'\n\nexport default function useFieldValidationForm({\n  initialValues,\n  callBack,\n  validationSchema\n}) {\n  const [formData, setFormData] = useState(initialValues)\n  const [errors, setErrors] = useState({})\n  const [isTouched, setTouched] = useState(false)\n  const [isOnSubmitCalled, setOnSubmitCalled] = useState(false)\n\n  useEffect(() => {\n    const areInitialValuesEqual = compare(formData, initialValues)\n\n    if (!areInitialValuesEqual && !isTouched) {\n      setFormData(initialValues)\n    }\n  }, [initialValues, formData, isTouched])\n\n  useEffect(() => {\n    const errorState = Object.values(errors)\n      .map((error) =>\n        typeof error === 'object' && error !== null\n          ? Object.values(error)\n          : error\n      )\n      .flat()\n      .filter((error) => error !== null)\n\n    const hasErrors = errorState.length > 0 || Object.keys(errors).length === 0\n    const areFieldsValidated = Object.keys(validationSchema).every((v) =>\n      Object.keys(errors).includes(v)\n    )\n\n    if (hasErrors) {\n      setOnSubmitCalled(false)\n    }\n\n    if (isOnSubmitCalled && isTouched && !hasErrors && areFieldsValidated) {\n      callBack(formData)\n      setFormData(initialValues)\n      setErrors({})\n      setTouched(false)\n      setOnSubmitCalled(false)\n    }\n  }, [\n    callBack,\n    errors,\n    initialValues,\n    formData,\n    isTouched,\n    isOnSubmitCalled,\n    validationSchema\n  ])\n\n  function getValueByType(type, value) {\n    if (type === 'number') {\n      return parseInt(value)\n    }\n    return value\n  }\n\n  let nestedSchemaObject = {}\n  const schemaObject = Object.entries(validationSchema).reduce(\n    (acc, [key, value]) => {\n      if (!Object.keys(value).includes('_deps')) {\n        nestedSchemaObject = Object.entries(value).reduce(\n          (nestedAcc, [nestedKey, nestedValue]) => ({\n            [nestedKey]: { [nestedKey]: nestedValue },\n            ...nestedAcc\n          }),\n          {}\n        )\n        return acc\n      }\n      return {\n        [key]: { [key]: value },\n        ...acc\n      }\n    },\n    {}\n  )\n\n  const validationSchemaObject = {\n    ...schemaObject,\n    ...nestedSchemaObject\n  }\n\n  async function handleValidateField(e) {\n    const { value, name } = e.target\n\n    const isObject = name.includes('.')\n    if (isObject) {\n      const [objectKey, objectValue] = name.split('.')\n      setTouched(true)\n      setOnSubmitCalled(false)\n\n      const fieldSchema = object().shape(validationSchemaObject[objectValue])\n\n      try {\n        await fieldSchema.validate({ [objectValue]: value })\n        setErrors((prevState) => ({\n          ...prevState,\n          [objectKey]: {\n            ...prevState[objectKey],\n            [objectValue]: null\n          }\n        }))\n      } catch (e) {\n        setErrors((prevState) => ({\n          ...prevState,\n          [objectKey]: {\n            ...prevState[objectKey],\n            [objectValue]: e.message\n          }\n        }))\n      }\n    } else {\n      setTouched(true)\n      setOnSubmitCalled(false)\n\n      const fieldSchema = object().shape(validationSchemaObject[name])\n      try {\n        await fieldSchema.validate({ [name]: value })\n        setErrors((prevState) => ({ ...prevState, [name]: null }))\n      } catch (e) {\n        setErrors((prevState) => ({ ...prevState, [name]: e.message }))\n      }\n    }\n  }\n\n  function handleChange(e) {\n    const { name, value, type } = e.target\n    const isObject = name.includes('.')\n    if (isObject) {\n      const [objectKey, objectValue] = name.split('.')\n\n      setFormData((prevState) => ({\n        ...prevState,\n        [objectKey]: {\n          ...formData[objectKey],\n          [objectValue]: getValueByType(type, value)\n        }\n      }))\n      setTouched(true)\n      setOnSubmitCalled(false)\n    } else {\n      setFormData((prevState) => ({\n        ...prevState,\n        [name]: getValueByType(type, value)\n      }))\n      setTouched(true)\n      setOnSubmitCalled(false)\n    }\n  }\n\n  function handleArrayOnChange({ e, id }) {\n    const { name, value } = e.target\n\n    const newArray = formData[name].map((currentValue) =>\n      currentValue.id === id ? { ...currentValue, name: value } : currentValue\n    )\n\n    setFormData((prevState) => ({ ...prevState, [name]: newArray }))\n    setTouched(true)\n    setOnSubmitCalled(false)\n  }\n\n  function handleArrayPushField({ key, data }) {\n    setFormData((prevState) => ({\n      ...prevState,\n      [key]: [...formData[key], data]\n    }))\n    setTouched(true)\n    setOnSubmitCalled(false)\n  }\n\n  function handleArrayRemoveField({ key, id }) {\n    const newArray = formData[key].filter((field) => field.id !== id)\n    setFormData((prevState) => ({ ...prevState, [key]: newArray }))\n    setTouched(true)\n    setOnSubmitCalled(false)\n  }\n\n  async function handleValidateArrayField({ e, id }) {\n    const { name, value } = e.target\n\n    const fieldSchema = object().shape(validationSchemaObject[name])\n    try {\n      await fieldSchema.validate({ [name]: value })\n      setErrors((prevState) => ({\n        ...prevState,\n        ...(prevState[name]\n          ? {\n              [name]: {\n                ...prevState[name],\n                [id]: null\n              }\n            }\n          : {\n              [name]: {\n                [id]: null\n              }\n            })\n      }))\n    } catch (e) {\n      setErrors((prevState) => ({\n        ...prevState,\n        ...(prevState[name]\n          ? {\n              [name]: {\n                ...prevState[name],\n                [id]: e.message\n              }\n            }\n          : {\n              [name]: {\n                [id]: e.message\n              }\n            })\n      }))\n    }\n    setTouched(true)\n  }\n\n  function handleValidateSchema(schema) {\n    Object.entries(schema).forEach(([key, value]) => {\n      const isObject =\n        typeof formData[key] === 'object' && !Array.isArray(formData[key])\n      const isArray = Array.isArray(formData[key])\n      if (isArray) {\n        if (formData[key].length) {\n          formData[key].map(({ id, name }) =>\n            handleValidateArrayField({\n              e: { target: { name: key, value: name } },\n              id\n            })\n          )\n        }\n      }\n\n      if (isObject) {\n        Object.keys(value).forEach((nestedKey) => {\n          handleValidateField({\n            target: {\n              name: `${key}.${nestedKey}`,\n              value: formData[key][nestedKey]\n            }\n          })\n        })\n      }\n\n      if (!isArray && !isObject) {\n        handleValidateField({ target: { name: key, value: formData[key] } })\n      }\n    })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    handleValidateSchema(validationSchema)\n    setOnSubmitCalled(true)\n  }\n\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n    handleArrayOnChange,\n    handleArrayPushField,\n    handleArrayRemoveField,\n    handleValidateArrayField,\n    errors\n  }\n}\n","import React from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport { Button, Box, FormLabel, Input } from '@chakra-ui/core'\n\nfunction Basic() {\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n  } = useFieldValidationForm({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n\n    validationSchema: {\n      email: string().email('Format invalid!').required('Field Required!'),\n      password: string()\n        .required('Field Required!')\n        .min(3, 'Minimum of 3 characters'),\n    },\n\n    callBack: (outputValues) => {\n      console.log(outputValues)\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='email'>Email</FormLabel>\n        <Input\n          type='text'\n          name='email'\n          id='email'\n          value={formData.email}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.email}</div>\n\n        <Box height='8' />\n        <FormLabel htmlFor='password'>Password</FormLabel>\n        <Input\n          type='password'\n          name='password'\n          id='password'\n          value={formData.password}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.password}</div>\n        <Box height='8' />\n\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n    </Box>\n  )\n}\n\nexport default Basic\n","import React from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport { Button, Box, FormLabel, Input } from '@chakra-ui/core'\n\nfunction Nested() {\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n  } = useFieldValidationForm({\n    initialValues: {\n      user: {\n        name: '',\n        email: '',\n      },\n    },\n\n    validationSchema: {\n      user: {\n        name: string()\n          .required('Field Required!')\n          .min(3, 'Minimum of 3 characters'),\n        email: string().email('Format invalid!').required('Field Required!'),\n      },\n    },\n\n    callBack: (outputValues) => {\n      console.log(outputValues)\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='name'>Name</FormLabel>\n        <Input\n          type='name'\n          name='user.name'\n          id='name'\n          value={formData.user.name}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n\n        <div>{formErrors?.user?.name}</div>\n        <Box height='8' />\n\n        <FormLabel htmlFor='email'>Email</FormLabel>\n        <Input\n          type='text'\n          name='user.email'\n          id='email'\n          value={formData.user.email}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.user?.email}</div>\n\n        <Box height='8' />\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n    </Box>\n  )\n}\n\nexport default Nested\n","import { Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navigation from './components/Navigation'\nimport Basic from './screens/Basic'\nimport Nested from './screens/Nested'\n\nfunction App() {\n  return (\n    <Box maxWidth='xl' margin='auto'>\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path='/react-field-validation-form'>\n            <Basic />\n          </Route>\n          <Route path='/react-field-validation-form/nested'>\n            <Nested />\n          </Route>\n        </Switch>\n      </Router>\n    </Box>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, ColorModeProvider, CSSReset } from '@chakra-ui/core'\nimport App from './App'\n\nReactDOM.render(\n  <ThemeProvider>\n    <ColorModeProvider>\n      <CSSReset />\n      <App />\n    </ColorModeProvider>\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}