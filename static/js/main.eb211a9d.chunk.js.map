{"version":3,"sources":["components/Navigation.js","../../src/index.js","screens/Basic.js","screens/Nested.js","screens/WithArray.js","screens/Async.js","App.js","index.js"],"names":["Navigation","Box","height","display","justifyContent","Button","variant","as","RouterLink","to","validationPropTypes","initialValues","PropTypes","id","name","string","validationSchema","callBack","isRequired","useFieldValidationForm","useState","Object","isObject","value","Array","isArray","nestedKey","type","parseInt","useEffect","compare","formData","setFormData","hasErrors","error","errorState","formDataKeys","reduceObjectToArray","errorsKeys","areFieldsValidated","v","setOnSubmitCalled","isOnSubmitCalled","setTouched","setErrors","nestedSchemaObject","schemaObject","acc","nestedValue","nestedAcc","validationSchemaObject","a","e","fieldSchema","object","prevState","message","getValueByType","handleValidateArrayField","target","handleValidateField","key","handleValidateSchema","newArray","currentValue","data","field","prevErrors","errors","Basic","values","setValues","email","password","required","min","outputValues","formErrors","handleChange","handleSubmit","method","onSubmit","FormLabel","htmlFor","Input","onChange","onBlur","JSON","stringify","Nested","user","WithArray","food","reduce","handleArrayOnChange","handleArrayRemoveField","handleArrayPushField","map","foodType","index","Flex","direction","length","IconButton","aria-label","icon","onClick","marginLeft","generate","Async","asyncData","setAsyncData","isLoading","setLoading","setTimeout","App","maxWidth","margin","exact","path","ReactDOM","render","ThemeProvider","ColorModeProvider","CSSReset","document","getElementById"],"mappings":"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","file":"static/js/main.eb211a9d.chunk.js","sourcesContent":["import { Button, Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nfunction Navigation() {\n  return (\n    <>\n      <Box height='2' />\n      <Box display='flex' justifyContent='space-around'>\n        <Button variant='link' as={RouterLink} to='/'>\n          Basic\n        </Button>\n        <Button variant='link' as={RouterLink} to='/nested'>\n          Nested\n        </Button>\n        <Button variant='link' as={RouterLink} to='/array'>\n          Array\n        </Button>\n        <Button variant='link' as={RouterLink} to='/async'>\n          Async\n        </Button>\n      </Box>\n      <Box height='2' />\n    </>\n  )\n}\n\nexport default Navigation\n","import compare from 'just-compare'\nimport { useEffect, useState } from 'react'\nimport { object } from 'yup'\nimport PropTypes from 'prop-types/prop-types'\n\nconst validationPropTypes = {\n  initialValues: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.objectOf(PropTypes.string),\n      PropTypes.arrayOf(\n        PropTypes.exact({\n          id: PropTypes.string,\n          name: PropTypes.string\n        })\n      )\n    ])\n  ),\n  validationSchema: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.objectOf(PropTypes.object)\n    ])\n  ),\n  callBack: PropTypes.func.isRequired\n}\n\nexport default function useFieldValidationForm({\n  initialValues,\n  validationSchema,\n  callBack\n}) {\n  const [formData, setFormData] = useState(initialValues)\n  const [errors, setErrors] = useState({})\n  const [isTouched, setTouched] = useState(false)\n  const [isOnSubmitCalled, setOnSubmitCalled] = useState(false)\n\n  useEffect(() => {\n    PropTypes.checkPropTypes(\n      validationPropTypes,\n      { callBack, initialValues, validationSchema },\n      'useFieldValidationForm',\n      useFieldValidationForm\n    )\n  }, [initialValues, callBack, validationSchema])\n\n  useEffect(() => {\n    const areInitialValuesEqual = compare(formData, initialValues)\n\n    if (!areInitialValuesEqual && !isTouched) {\n      setFormData(initialValues)\n    }\n  }, [initialValues, formData, isTouched])\n\n  useEffect(() => {\n    const errorState = Object.values(errors)\n      .map((error) =>\n        typeof error === 'object' && error !== null\n          ? Object.values(error)\n          : error\n      )\n      .flat()\n      .filter((error) => error !== null)\n\n    const hasErrors = errorState.length > 0 || Object.keys(errors).length === 0\n\n    const formDataKeys = reduceObjectToArray(formData)\n\n    const errorsKeys = reduceObjectToArray(errors)\n\n    const areFieldsValidated = formDataKeys.every(\n      (v) => errorsKeys.indexOf(v) !== -1\n    )\n\n    if (hasErrors && areFieldsValidated) {\n      setOnSubmitCalled(false)\n    }\n\n    if (isOnSubmitCalled && isTouched && !hasErrors && areFieldsValidated) {\n      callBack(formData)\n      setFormData(initialValues)\n      setTouched(false)\n      setOnSubmitCalled(false)\n      setErrors({})\n    }\n  }, [\n    callBack,\n    errors,\n    initialValues,\n    formData,\n    isTouched,\n    isOnSubmitCalled,\n    validationSchema\n  ])\n\n  function reduceObjectToArray(obj) {\n    return Object.entries(obj)\n      .map(([key, value]) => {\n        const isObject = typeof value === 'object' && !Array.isArray(value)\n        const isArray = Array.isArray(value)\n\n        if (value && isObject) {\n          return Object.keys(value)\n        }\n        if (isArray) {\n          return value.map((nestedKey) => nestedKey.id)\n        }\n        return key\n      })\n      .flat()\n  }\n\n  function getValueByType(type, value) {\n    if (type === 'number') {\n      return parseInt(value)\n    }\n    return value\n  }\n\n  let nestedSchemaObject = {}\n  const schemaObject = Object.entries(validationSchema).reduce(\n    (acc, [key, value]) => {\n      if (!Object.keys(value).includes('_deps')) {\n        nestedSchemaObject = Object.entries(value).reduce(\n          (nestedAcc, [nestedKey, nestedValue]) => ({\n            [nestedKey]: { [nestedKey]: nestedValue },\n            ...nestedAcc\n          }),\n          {}\n        )\n        return acc\n      }\n      return {\n        [key]: { [key]: value },\n        ...acc\n      }\n    },\n    {}\n  )\n\n  const validationSchemaObject = {\n    ...schemaObject,\n    ...nestedSchemaObject\n  }\n\n  async function handleValidateField(e) {\n    const { value, name } = e.target\n    const isObject = name.includes('.')\n    if (isObject) {\n      const [objectKey, objectValue] = name.split('.')\n      setTouched(true)\n\n      const fieldSchema = object().shape(validationSchemaObject[objectValue])\n\n      try {\n        await fieldSchema.validate({ [objectValue]: value })\n        setErrors((prevState) => ({\n          ...prevState,\n          [objectKey]: {\n            ...prevState[objectKey],\n            [objectValue]: null\n          }\n        }))\n      } catch (e) {\n        setErrors((prevState) => ({\n          ...prevState,\n          [objectKey]: {\n            ...prevState[objectKey],\n            [objectValue]: e.message\n          }\n        }))\n      }\n    } else {\n      setTouched(true)\n\n      const fieldSchema = object().shape(validationSchemaObject[name])\n      try {\n        await fieldSchema.validate({ [name]: value })\n        setErrors((prevState) => ({ ...prevState, [name]: null }))\n      } catch (e) {\n        setErrors((prevState) => ({ ...prevState, [name]: e.message }))\n      }\n    }\n  }\n\n  function handleChange(e) {\n    const { name, value, type } = e.target\n\n    const isObject = name.includes('.')\n    if (isObject) {\n      const [objectKey, objectValue] = name.split('.')\n\n      setFormData((prevState) => ({\n        ...prevState,\n        [objectKey]: {\n          ...formData[objectKey],\n          [objectValue]: getValueByType(type, value)\n        }\n      }))\n      setTouched(true)\n    } else {\n      setFormData((prevState) => ({\n        ...prevState,\n        [name]: getValueByType(type, value)\n      }))\n      setTouched(true)\n    }\n  }\n\n  function handleArrayOnChange({ e, id }) {\n    const { name, value } = e.target\n\n    const newArray = formData[name].map((currentValue) =>\n      currentValue.id === id ? { ...currentValue, name: value } : currentValue\n    )\n\n    setFormData((prevState) => ({ ...prevState, [name]: newArray }))\n    setTouched(true)\n  }\n\n  function handleArrayPushField({ key, data }) {\n    setFormData((prevState) => ({\n      ...prevState,\n      [key]: [...formData[key], data]\n    }))\n    setTouched(true)\n  }\n\n  function handleArrayRemoveField({ key, id }) {\n    setFormData((prevState) => ({\n      ...prevState,\n      [key]: prevState[key].filter((field) => field.id !== id)\n    }))\n    setErrors((prevErrors) => {\n      if (prevErrors?.[key]?.[id]) delete prevErrors[key][id]\n      return prevErrors\n    })\n    setTouched(true)\n  }\n\n  async function handleValidateArrayField({ e, id }) {\n    const { name, value } = e.target\n    const fieldSchema = object().shape(validationSchemaObject[name])\n    try {\n      await fieldSchema.validate({ [name]: value })\n      setErrors((prevState) => ({\n        ...prevState,\n        ...(prevState[name]\n          ? {\n              [name]: {\n                ...prevState[name],\n                [id]: null\n              }\n            }\n          : {\n              [name]: {\n                [id]: null\n              }\n            })\n      }))\n    } catch (e) {\n      setErrors((prevState) => ({\n        ...prevState,\n        ...(prevState[name]\n          ? {\n              [name]: {\n                ...prevState[name],\n                [id]: e.message\n              }\n            }\n          : {\n              [name]: {\n                [id]: e.message\n              }\n            })\n      }))\n    }\n    setTouched(true)\n  }\n\n  function handleValidateSchema(schema) {\n    const errorsKeys = reduceObjectToArray(errors)\n\n    Object.entries(schema).forEach(([key, value]) => {\n      const isObject =\n        typeof formData[key] === 'object' && !Array.isArray(formData[key])\n      const isArray = Array.isArray(formData[key])\n      if (isArray) {\n        if (formData[key].length) {\n          formData[key].map(({ id, name }) => {\n            if (!errorsKeys.includes(id)) {\n              handleValidateArrayField({\n                e: { target: { name: key, value: name } },\n                id\n              })\n            }\n          })\n        }\n      }\n\n      if (isObject) {\n        Object.keys(value).forEach((nestedKey) => {\n          if (!errorsKeys.includes(nestedKey)) {\n            handleValidateField({\n              target: {\n                name: `${key}.${nestedKey}`,\n                value: formData[key][nestedKey]\n              }\n            })\n          }\n        })\n      }\n\n      if (!isArray && !isObject && !errorsKeys.includes(key)) {\n        handleValidateField({ target: { name: key, value: formData[key] } })\n      }\n    })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    handleValidateSchema(validationSchema)\n    setOnSubmitCalled(true)\n  }\n\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n    handleArrayOnChange,\n    handleArrayPushField,\n    handleArrayRemoveField,\n    handleValidateArrayField,\n    errors\n  }\n}\n","import React, { useState } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport { Button, Box, FormLabel, Input } from '@chakra-ui/core'\n\nfunction Basic() {\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n  } = useFieldValidationForm({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n\n    validationSchema: {\n      email: string().required('Field Required!').email('Format invalid!'),\n      password: string()\n        .required('Field Required!')\n        .min(3, 'Minimum of 3 characters'),\n    },\n\n    callBack: (outputValues) => {\n      setValues(outputValues)\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='email'>Email</FormLabel>\n        <Input\n          type='text'\n          name='email'\n          id='email'\n          value={formData.email}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.email}</div>\n\n        <Box height='8' />\n        <FormLabel htmlFor='password'>Password</FormLabel>\n        <Input\n          type='password'\n          name='password'\n          id='password'\n          value={formData.password}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.password}</div>\n        <Box height='8' />\n\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n\n      <Box height='8' />\n      <Box>Output Values: {values && JSON.stringify(values, null, 2)}</Box>\n    </Box>\n  )\n}\n\nexport default Basic\n","import React, { useState } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport { Button, Box, FormLabel, Input } from '@chakra-ui/core'\n\nfunction Nested() {\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n  } = useFieldValidationForm({\n    initialValues: {\n      user: {\n        name: '',\n        email: '',\n      },\n    },\n\n    validationSchema: {\n      user: {\n        name: string()\n          .required('Field Required!')\n          .min(3, 'Minimum of 3 characters'),\n        email: string().required('Field Required!').email('Format invalid!'),\n      },\n    },\n\n    callBack: (outputValues) => {\n      setValues(outputValues)\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='name'>Name</FormLabel>\n        <Input\n          type='name'\n          name='user.name'\n          id='name'\n          value={formData.user.name}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n\n        <div>{formErrors?.user?.name}</div>\n        <Box height='8' />\n\n        <FormLabel htmlFor='email'>Email</FormLabel>\n        <Input\n          type='text'\n          name='user.email'\n          id='email'\n          value={formData.user.email}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.user?.email}</div>\n\n        <Box height='8' />\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n\n      <Box height='8' />\n      <Box>Output Values: {values && JSON.stringify(values, null, 2)}</Box>\n    </Box>\n  )\n}\n\nexport default Nested\n","import React, { useState } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport {\n  Button,\n  Box,\n  FormLabel,\n  Input,\n  IconButton,\n  Flex,\n} from '@chakra-ui/core'\nimport { generate } from 'shortid'\n\nfunction WithArray() {\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n    handleArrayOnChange,\n    handleValidateArrayField,\n    handleArrayRemoveField,\n    handleArrayPushField,\n  } = useFieldValidationForm({\n    initialValues: {\n      name: '',\n      food: [{ id: '1', name: '' }],\n    },\n\n    validationSchema: {\n      name: string()\n        .required('Field Required!')\n        .min(3, 'Minimum of 3 characters'),\n      food: string()\n        .required('Field Required!')\n        .min(2, 'Minimum of 2 characters'),\n    },\n\n    callBack: (outputValues) => {\n      const food = outputValues.food.reduce(\n        (acc, { id, name }) => [...acc, name],\n        []\n      )\n\n      setValues({ ...outputValues, food })\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='name'>Name</FormLabel>\n        <Input\n          type='name'\n          name='name'\n          id='name'\n          value={formData.name}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n\n        <div>{formErrors?.name}</div>\n        <Box height='8' />\n\n        {formData.food.map((foodType, index) => (\n          <Box key={index}>\n            <Flex direction='column'>\n              <FormLabel htmlFor='food'>\n                Preferred food No: {index + 1}\n              </FormLabel>\n              <Flex>\n                <Input\n                  type='text'\n                  name='food'\n                  id={foodType.id}\n                  value={foodType.name}\n                  onChange={(e) =>\n                    handleArrayOnChange({ e, id: foodType.id, index })\n                  }\n                  onBlur={(e) =>\n                    handleValidateArrayField({ e, id: foodType.id })\n                  }\n                />\n\n                {formData.food.length > 1 && (\n                  <IconButton\n                    aria-label='Remove Food'\n                    icon='close'\n                    onClick={() =>\n                      handleArrayRemoveField({ key: 'food', id: foodType.id })\n                    }\n                    marginLeft='2'\n                  />\n                )}\n              </Flex>\n              <Box>{formErrors?.food?.[foodType.id]}</Box>\n            </Flex>\n            <Box height='8' />\n          </Box>\n        ))}\n\n        <Button\n          onClick={() =>\n            handleArrayPushField({\n              key: 'food',\n              data: { id: generate(), name: '' },\n            })\n          }\n        >\n          Add new type of Food\n        </Button>\n\n        <Box height='8' />\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n\n      <Box height='8' />\n      <Box>Output Values: {values && JSON.stringify(values, null, 2)}</Box>\n    </Box>\n  )\n}\n\nexport default WithArray\n","import React, { useState, useEffect } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport {\n  Button,\n  Box,\n  FormLabel,\n  Input,\n  IconButton,\n  Flex,\n} from '@chakra-ui/core'\nimport { generate } from 'shortid'\n\nfunction Async() {\n  const [asyncData, setAsyncData] = useState(null)\n  const [isLoading, setLoading] = useState(false)\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n    handleArrayOnChange,\n    handleValidateArrayField,\n    handleArrayRemoveField,\n    handleArrayPushField,\n  } = useFieldValidationForm({\n    initialValues: {\n      name: asyncData?.name ?? '',\n      food: asyncData?.food.length\n        ? asyncData.food.map((type, index) => ({\n            id: `${index + 1}`,\n            name: type,\n          }))\n        : [{ id: '1', name: '' }],\n    },\n\n    validationSchema: {\n      name: string()\n        .required('Field Required!')\n        .min(3, 'Minimum of 3 characters'),\n      food: string()\n        .required('Field Required!')\n        .min(2, 'Minimum of 2 characters'),\n    },\n\n    callBack: (outputValues) => {\n      const food = outputValues.food.reduce(\n        (acc, { id, name }) => [...acc, name],\n        []\n      )\n\n      setValues({ ...outputValues, food })\n    },\n  })\n\n  useEffect(() => {\n    if (!asyncData) {\n      setLoading(true)\n      setTimeout(() => {\n        setAsyncData({\n          name: 'Example Name',\n          food: ['fries', 'fish', 'eggs', 'tofu'],\n        })\n        setLoading(false)\n      }, 3000)\n    }\n  }, [asyncData])\n\n  return (\n    <Box>\n      {isLoading ? (\n        <Box>\n          <Box height='8' />\n          <Box height='8' />\n          <Box>Data is Loading ...... </Box>\n        </Box>\n      ) : (\n        <Box>\n          <Box height='8' />\n          <form method='POST' onSubmit={handleSubmit}>\n            <FormLabel htmlFor='name'>Name</FormLabel>\n            <Input\n              type='name'\n              name='name'\n              id='name'\n              value={formData.name}\n              onChange={handleChange}\n              onBlur={handleValidateField}\n            />\n\n            <div>{formErrors?.name}</div>\n            <Box height='8' />\n\n            {formData.food.map((foodType, index) => (\n              <Box key={index}>\n                <Flex direction='column'>\n                  <FormLabel htmlFor='food'>\n                    Preferred food No: {index + 1}\n                  </FormLabel>\n                  <Flex>\n                    <Input\n                      type='text'\n                      name='food'\n                      id={foodType.id}\n                      value={foodType.name}\n                      onChange={(e) =>\n                        handleArrayOnChange({ e, id: foodType.id, index })\n                      }\n                      onBlur={(e) =>\n                        handleValidateArrayField({ e, id: foodType.id })\n                      }\n                    />\n\n                    {formData.food.length > 1 && (\n                      <IconButton\n                        aria-label='Remove Food'\n                        icon='close'\n                        onClick={() =>\n                          handleArrayRemoveField({\n                            key: 'food',\n                            id: foodType.id,\n                          })\n                        }\n                        marginLeft='2'\n                      />\n                    )}\n                  </Flex>\n                  <Box>{formErrors?.food?.[foodType.id]}</Box>\n                </Flex>\n                <Box height='8' />\n              </Box>\n            ))}\n\n            <Button\n              onClick={() =>\n                handleArrayPushField({\n                  key: 'food',\n                  data: { id: generate(), name: '' },\n                })\n              }\n            >\n              Add new type of Food\n            </Button>\n\n            <Box height='8' />\n            <Button variant='solid' type='submit'>\n              submit{' '}\n            </Button>\n          </form>\n\n          <Box height='8' />\n          <Box>\n            Output Values to be sent back to server:{' '}\n            {values && JSON.stringify(values, null, 2)}\n          </Box>\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default Async\n","import { Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navigation from './components/Navigation'\nimport Basic from './screens/Basic'\nimport Nested from './screens/Nested'\nimport WithArray from './screens/WithArray'\nimport Async from './screens/Async'\n\nfunction App() {\n  return (\n    <Box maxWidth='xl' margin='auto'>\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path='/'>\n            <Basic />\n          </Route>\n          <Route path='/nested'>\n            <Nested />\n          </Route>\n          <Route path='/array'>\n            <WithArray />\n          </Route>\n          <Route path='/async'>\n            <Async />\n          </Route>\n        </Switch>\n      </Router>\n    </Box>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, ColorModeProvider, CSSReset } from '@chakra-ui/core'\nimport App from './App'\n\nReactDOM.render(\n  <ThemeProvider>\n    <ColorModeProvider>\n      <CSSReset />\n      <App />\n    </ColorModeProvider>\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}