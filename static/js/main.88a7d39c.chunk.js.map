{"version":3,"sources":["components/Navigation.js","../../src/index.js","screens/Basic.js","screens/Nested.js","screens/WithArray.js","screens/Async.js","App.js","index.js"],"names":["Navigation","Box","height","display","justifyContent","Button","variant","as","RouterLink","to","validationSchema","useState","Object","isObject","value","Array","isArray","nestedKey","type","parseInt","useEffect","compare","formData","setFormData","initialValues","hasErrors","error","errorState","formDataKeys","reduceObjectToArray","errorsKeys","areFieldsValidated","v","setOnSubmitCalled","isOnSubmitCalled","callBack","setTouched","setErrors","nestedSchemaObject","schemaObject","acc","nestedValue","nestedAcc","validationSchemaObject","a","e","name","fieldSchema","object","prevState","message","id","getValueByType","handleValidateArrayField","target","handleValidateField","key","handleValidateSchema","newArray","currentValue","data","field","errors","Basic","values","setValues","useFieldValidationForm","email","password","string","required","min","outputValues","formErrors","handleChange","handleSubmit","method","onSubmit","FormLabel","htmlFor","Input","onChange","onBlur","JSON","stringify","Nested","user","WithArray","food","reduce","handleArrayOnChange","handleArrayRemoveField","handleArrayPushField","map","foodType","index","Flex","direction","length","IconButton","aria-label","icon","onClick","marginLeft","generate","Async","asyncData","setAsyncData","isLoading","setLoading","setTimeout","App","maxWidth","margin","exact","path","ReactDOM","render","ThemeProvider","ColorModeProvider","CSSReset","document","getElementById"],"mappings":"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","file":"static/js/main.88a7d39c.chunk.js","sourcesContent":["import { Button, Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nfunction Navigation() {\n  return (\n    <>\n      <Box height='2' />\n      <Box display='flex' justifyContent='space-around'>\n        <Button\n          variant='link'\n          as={RouterLink}\n          to='/react-field-validation-form'\n        >\n          Basic\n        </Button>\n        <Button\n          variant='link'\n          as={RouterLink}\n          to='/react-field-validation-form/nested'\n        >\n          Nested\n        </Button>\n        <Button\n          variant='link'\n          as={RouterLink}\n          to='/react-field-validation-form/array'\n        >\n          Array\n        </Button>\n        <Button\n          variant='link'\n          as={RouterLink}\n          to='/react-field-validation-form/async'\n        >\n          Async\n        </Button>\n      </Box>\n      <Box height='2' />\n    </>\n  )\n}\n\nexport default Navigation\n","import compare from 'just-compare'\nimport { useEffect, useState } from 'react'\nimport { object } from 'yup'\n\nexport default function useFieldValidationForm({\n  initialValues,\n  callBack,\n  validationSchema\n}) {\n  const [formData, setFormData] = useState(initialValues)\n  const [errors, setErrors] = useState({})\n  const [isTouched, setTouched] = useState(false)\n  const [isOnSubmitCalled, setOnSubmitCalled] = useState(false)\n\n  useEffect(() => {\n    const areInitialValuesEqual = compare(formData, initialValues)\n\n    if (!areInitialValuesEqual && !isTouched) {\n      setFormData(initialValues)\n    }\n  }, [initialValues, formData, isTouched])\n\n  useEffect(() => {\n    const errorState = Object.values(errors)\n      .map((error) =>\n        typeof error === 'object' && error !== null\n          ? Object.values(error)\n          : error\n      )\n      .flat()\n      .filter((error) => error !== null)\n\n    const hasErrors = errorState.length > 0 || Object.keys(errors).length === 0\n\n    const formDataKeys = reduceObjectToArray(formData)\n\n    const errorsKeys = reduceObjectToArray(errors)\n\n    const areFieldsValidated = formDataKeys.every(\n      (v) => errorsKeys.indexOf(v) !== -1\n    )\n\n    if (hasErrors) {\n      setOnSubmitCalled(false)\n    }\n\n    if (isOnSubmitCalled && isTouched && !hasErrors && areFieldsValidated) {\n      callBack(formData)\n      setFormData(initialValues)\n      setTouched(false)\n      setOnSubmitCalled(false)\n      setErrors({})\n    }\n  }, [\n    callBack,\n    errors,\n    initialValues,\n    formData,\n    isTouched,\n    isOnSubmitCalled,\n    validationSchema\n  ])\n\n  function reduceObjectToArray(obj) {\n    return Object.entries(obj)\n      .map(([key, value]) => {\n        const isObject = typeof value === 'object' && !Array.isArray(value)\n        const isArray = Array.isArray(value)\n\n        if (value && isObject) {\n          return Object.keys(value)\n        }\n        if (isArray) {\n          return value.map((nestedKey) => nestedKey.id)\n        }\n        return key\n      })\n      .flat()\n  }\n\n  function getValueByType(type, value) {\n    if (type === 'number') {\n      return parseInt(value)\n    }\n    return value\n  }\n\n  let nestedSchemaObject = {}\n  const schemaObject = Object.entries(validationSchema).reduce(\n    (acc, [key, value]) => {\n      if (!Object.keys(value).includes('_deps')) {\n        nestedSchemaObject = Object.entries(value).reduce(\n          (nestedAcc, [nestedKey, nestedValue]) => ({\n            [nestedKey]: { [nestedKey]: nestedValue },\n            ...nestedAcc\n          }),\n          {}\n        )\n        return acc\n      }\n      return {\n        [key]: { [key]: value },\n        ...acc\n      }\n    },\n    {}\n  )\n\n  const validationSchemaObject = {\n    ...schemaObject,\n    ...nestedSchemaObject\n  }\n\n  async function handleValidateField(e) {\n    const { value, name } = e.target\n    const isObject = name.includes('.')\n    if (isObject) {\n      const [objectKey, objectValue] = name.split('.')\n      setTouched(true)\n      setOnSubmitCalled(false)\n\n      const fieldSchema = object().shape(validationSchemaObject[objectValue])\n\n      try {\n        await fieldSchema.validate({ [objectValue]: value })\n        setErrors((prevState) => ({\n          ...prevState,\n          [objectKey]: {\n            ...prevState[objectKey],\n            [objectValue]: null\n          }\n        }))\n      } catch (e) {\n        setErrors((prevState) => ({\n          ...prevState,\n          [objectKey]: {\n            ...prevState[objectKey],\n            [objectValue]: e.message\n          }\n        }))\n      }\n    } else {\n      setTouched(true)\n      setOnSubmitCalled(false)\n\n      const fieldSchema = object().shape(validationSchemaObject[name])\n      try {\n        await fieldSchema.validate({ [name]: value })\n        setErrors((prevState) => ({ ...prevState, [name]: null }))\n      } catch (e) {\n        setErrors((prevState) => ({ ...prevState, [name]: e.message }))\n      }\n    }\n  }\n\n  function handleChange(e) {\n    const { name, value, type } = e.target\n\n    const isObject = name.includes('.')\n    if (isObject) {\n      const [objectKey, objectValue] = name.split('.')\n\n      setFormData((prevState) => ({\n        ...prevState,\n        [objectKey]: {\n          ...formData[objectKey],\n          [objectValue]: getValueByType(type, value)\n        }\n      }))\n      setTouched(true)\n      setOnSubmitCalled(false)\n    } else {\n      setFormData((prevState) => ({\n        ...prevState,\n        [name]: getValueByType(type, value)\n      }))\n      setTouched(true)\n      setOnSubmitCalled(false)\n    }\n  }\n\n  function handleArrayOnChange({ e, id }) {\n    const { name, value } = e.target\n\n    const newArray = formData[name].map((currentValue) =>\n      currentValue.id === id ? { ...currentValue, name: value } : currentValue\n    )\n\n    setFormData((prevState) => ({ ...prevState, [name]: newArray }))\n    setTouched(true)\n    setOnSubmitCalled(false)\n  }\n\n  function handleArrayPushField({ key, data }) {\n    setFormData((prevState) => ({\n      ...prevState,\n      [key]: [...formData[key], data]\n    }))\n    setTouched(true)\n    setOnSubmitCalled(false)\n  }\n\n  function handleArrayRemoveField({ key, id }) {\n    const newArray = formData[key].filter((field) => field.id !== id)\n    setFormData((prevState) => ({ ...prevState, [key]: newArray }))\n    setTouched(true)\n    setOnSubmitCalled(false)\n  }\n\n  async function handleValidateArrayField({ e, id }) {\n    const { name, value } = e.target\n    const fieldSchema = object().shape(validationSchemaObject[name])\n    try {\n      await fieldSchema.validate({ [name]: value })\n      setErrors((prevState) => ({\n        ...prevState,\n        ...(prevState[name]\n          ? {\n              [name]: {\n                ...prevState[name],\n                [id]: null\n              }\n            }\n          : {\n              [name]: {\n                [id]: null\n              }\n            })\n      }))\n    } catch (e) {\n      setErrors((prevState) => ({\n        ...prevState,\n        ...(prevState[name]\n          ? {\n              [name]: {\n                ...prevState[name],\n                [id]: e.message\n              }\n            }\n          : {\n              [name]: {\n                [id]: e.message\n              }\n            })\n      }))\n    }\n    setTouched(true)\n  }\n\n  function handleValidateSchema(schema) {\n    const errorsKeys = reduceObjectToArray(errors)\n\n    Object.entries(schema).forEach(([key, value]) => {\n      const isObject =\n        typeof formData[key] === 'object' && !Array.isArray(formData[key])\n      const isArray = Array.isArray(formData[key])\n      if (isArray) {\n        if (formData[key].length) {\n          formData[key].map(({ id, name }) => {\n            if (!errorsKeys.includes(id)) {\n              handleValidateArrayField({\n                e: { target: { name: key, value: name } },\n                id\n              })\n            }\n          })\n        }\n      }\n\n      if (isObject) {\n        Object.keys(value).forEach((nestedKey) => {\n          if (!errorsKeys.includes(nestedKey)) {\n            handleValidateField({\n              target: {\n                name: `${key}.${nestedKey}`,\n                value: formData[key][nestedKey]\n              }\n            })\n          }\n        })\n      }\n\n      if (!isArray && !isObject && !errorsKeys.includes(key)) {\n        handleValidateField({ target: { name: key, value: formData[key] } })\n      }\n    })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    handleValidateSchema(validationSchema)\n    setOnSubmitCalled(true)\n  }\n\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n    handleArrayOnChange,\n    handleArrayPushField,\n    handleArrayRemoveField,\n    handleValidateArrayField,\n    errors\n  }\n}\n","import React, { useState } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport { Button, Box, FormLabel, Input } from '@chakra-ui/core'\n\nfunction Basic() {\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n  } = useFieldValidationForm({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n\n    validationSchema: {\n      email: string().required('Field Required!').email('Format invalid!'),\n      password: string()\n        .required('Field Required!')\n        .min(3, 'Minimum of 3 characters'),\n    },\n\n    callBack: (outputValues) => {\n      setValues(outputValues)\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='email'>Email</FormLabel>\n        <Input\n          type='text'\n          name='email'\n          id='email'\n          value={formData.email}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.email}</div>\n\n        <Box height='8' />\n        <FormLabel htmlFor='password'>Password</FormLabel>\n        <Input\n          type='password'\n          name='password'\n          id='password'\n          value={formData.password}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.password}</div>\n        <Box height='8' />\n\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n\n      <Box height='8' />\n      <Box>Output Values: {values && JSON.stringify(values, null, 2)}</Box>\n    </Box>\n  )\n}\n\nexport default Basic\n","import React, { useState } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport { Button, Box, FormLabel, Input } from '@chakra-ui/core'\n\nfunction Nested() {\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n  } = useFieldValidationForm({\n    initialValues: {\n      user: {\n        name: '',\n        email: '',\n      },\n    },\n\n    validationSchema: {\n      user: {\n        name: string()\n          .required('Field Required!')\n          .min(3, 'Minimum of 3 characters'),\n        email: string().required('Field Required!').email('Format invalid!'),\n      },\n    },\n\n    callBack: (outputValues) => {\n      setValues(outputValues)\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='name'>Name</FormLabel>\n        <Input\n          type='name'\n          name='user.name'\n          id='name'\n          value={formData.user.name}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n\n        <div>{formErrors?.user?.name}</div>\n        <Box height='8' />\n\n        <FormLabel htmlFor='email'>Email</FormLabel>\n        <Input\n          type='text'\n          name='user.email'\n          id='email'\n          value={formData.user.email}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n        <div>{formErrors?.user?.email}</div>\n\n        <Box height='8' />\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n\n      <Box height='8' />\n      <Box>Output Values: {values && JSON.stringify(values, null, 2)}</Box>\n    </Box>\n  )\n}\n\nexport default Nested\n","import React, { useState } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport {\n  Button,\n  Box,\n  FormLabel,\n  Input,\n  IconButton,\n  Flex,\n} from '@chakra-ui/core'\nimport { generate } from 'shortid'\n\nfunction WithArray() {\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n    handleArrayOnChange,\n    handleValidateArrayField,\n    handleArrayRemoveField,\n    handleArrayPushField,\n  } = useFieldValidationForm({\n    initialValues: {\n      name: '',\n      food: [{ id: '1', name: '' }],\n    },\n\n    validationSchema: {\n      name: string()\n        .required('Field Required!')\n        .min(3, 'Minimum of 3 characters'),\n      food: string()\n        .required('Field Required!')\n        .min(2, 'Minimum of 2 characters'),\n    },\n\n    callBack: (outputValues) => {\n      const food = outputValues.food.reduce(\n        (acc, { id, name }) => [...acc, name],\n        []\n      )\n\n      setValues({ ...outputValues, food })\n    },\n  })\n\n  return (\n    <Box>\n      <Box height='8' />\n      <form method='POST' onSubmit={handleSubmit}>\n        <FormLabel htmlFor='name'>Name</FormLabel>\n        <Input\n          type='name'\n          name='name'\n          id='name'\n          value={formData.name}\n          onChange={handleChange}\n          onBlur={handleValidateField}\n        />\n\n        <div>{formErrors?.name}</div>\n        <Box height='8' />\n\n        {formData.food.map((foodType, index) => (\n          <Box key={index}>\n            <Flex direction='column'>\n              <FormLabel htmlFor='food'>\n                Preferred food No: {index + 1}\n              </FormLabel>\n              <Flex>\n                <Input\n                  type='text'\n                  name='food'\n                  id={foodType.id}\n                  value={foodType.name}\n                  onChange={(e) =>\n                    handleArrayOnChange({ e, id: foodType.id, index })\n                  }\n                  onBlur={(e) =>\n                    handleValidateArrayField({ e, id: foodType.id })\n                  }\n                />\n\n                {formData.food.length > 1 && (\n                  <IconButton\n                    aria-label='Remove Food'\n                    icon='close'\n                    onClick={() =>\n                      handleArrayRemoveField({ key: 'food', id: foodType.id })\n                    }\n                    marginLeft='2'\n                  />\n                )}\n              </Flex>\n              <Box>{formErrors?.food?.[foodType.id]}</Box>\n            </Flex>\n            <Box height='8' />\n          </Box>\n        ))}\n\n        <Button\n          onClick={() =>\n            handleArrayPushField({\n              key: 'food',\n              data: { id: generate(), name: '' },\n            })\n          }\n        >\n          Add new type of Food\n        </Button>\n\n        <Box height='8' />\n        <Button variant='solid' type='submit'>\n          submit{' '}\n        </Button>\n      </form>\n\n      <Box height='8' />\n      <Box>Output Values: {values && JSON.stringify(values, null, 2)}</Box>\n    </Box>\n  )\n}\n\nexport default WithArray\n","import React, { useState, useEffect } from 'react'\nimport { string } from 'yup'\nimport useFieldValidationForm from 'react-field-validation-form'\nimport {\n  Button,\n  Box,\n  FormLabel,\n  Input,\n  IconButton,\n  Flex,\n} from '@chakra-ui/core'\nimport { generate } from 'shortid'\n\nfunction Async() {\n  const [asyncData, setAsyncData] = useState(null)\n  const [isLoading, setLoading] = useState(false)\n  const [values, setValues] = useState(null)\n\n  const {\n    formData,\n    errors: formErrors,\n    handleChange,\n    handleSubmit,\n    handleValidateField,\n    handleArrayOnChange,\n    handleValidateArrayField,\n    handleArrayRemoveField,\n    handleArrayPushField,\n  } = useFieldValidationForm({\n    initialValues: {\n      name: asyncData?.name ?? '',\n      food: asyncData?.food.length\n        ? asyncData.food.map((type, index) => ({\n            id: `${index + 1}`,\n            name: type,\n          }))\n        : [{ id: '1', name: '' }],\n    },\n\n    validationSchema: {\n      name: string()\n        .required('Field Required!')\n        .min(3, 'Minimum of 3 characters'),\n      food: string()\n        .required('Field Required!')\n        .min(2, 'Minimum of 2 characters'),\n    },\n\n    callBack: (outputValues) => {\n      const food = outputValues.food.reduce(\n        (acc, { id, name }) => [...acc, name],\n        []\n      )\n\n      setValues({ ...outputValues, food })\n    },\n  })\n\n  useEffect(() => {\n    if (!asyncData) {\n      setLoading(true)\n      setTimeout(() => {\n        setAsyncData({\n          name: 'Example Name',\n          food: ['fries', 'fish', 'eggs', 'tofu'],\n        })\n        setLoading(false)\n      }, 3000)\n    }\n  }, [asyncData])\n\n  return (\n    <Box>\n      {isLoading ? (\n        <Box>\n          <Box height='8' />\n          <Box height='8' />\n          <Box>Data is Loading ...... </Box>\n        </Box>\n      ) : (\n        <Box>\n          <Box height='8' />\n          <form method='POST' onSubmit={handleSubmit}>\n            <FormLabel htmlFor='name'>Name</FormLabel>\n            <Input\n              type='name'\n              name='name'\n              id='name'\n              value={formData.name}\n              onChange={handleChange}\n              onBlur={handleValidateField}\n            />\n\n            <div>{formErrors?.name}</div>\n            <Box height='8' />\n\n            {formData.food.map((foodType, index) => (\n              <Box key={index}>\n                <Flex direction='column'>\n                  <FormLabel htmlFor='food'>\n                    Preferred food No: {index + 1}\n                  </FormLabel>\n                  <Flex>\n                    <Input\n                      type='text'\n                      name='food'\n                      id={foodType.id}\n                      value={foodType.name}\n                      onChange={(e) =>\n                        handleArrayOnChange({ e, id: foodType.id, index })\n                      }\n                      onBlur={(e) =>\n                        handleValidateArrayField({ e, id: foodType.id })\n                      }\n                    />\n\n                    {formData.food.length > 1 && (\n                      <IconButton\n                        aria-label='Remove Food'\n                        icon='close'\n                        onClick={() =>\n                          handleArrayRemoveField({\n                            key: 'food',\n                            id: foodType.id,\n                          })\n                        }\n                        marginLeft='2'\n                      />\n                    )}\n                  </Flex>\n                  <Box>{formErrors?.food?.[foodType.id]}</Box>\n                </Flex>\n                <Box height='8' />\n              </Box>\n            ))}\n\n            <Button\n              onClick={() =>\n                handleArrayPushField({\n                  key: 'food',\n                  data: { id: generate(), name: '' },\n                })\n              }\n            >\n              Add new type of Food\n            </Button>\n\n            <Box height='8' />\n            <Button variant='solid' type='submit'>\n              submit{' '}\n            </Button>\n          </form>\n\n          <Box height='8' />\n          <Box>\n            Output Values to be sent back to server:{' '}\n            {values && JSON.stringify(values, null, 2)}\n          </Box>\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default Async\n","import { Box } from '@chakra-ui/core'\nimport React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navigation from './components/Navigation'\nimport Basic from './screens/Basic'\nimport Nested from './screens/Nested'\nimport WithArray from './screens/WithArray'\nimport Async from './screens/Async'\n\nfunction App() {\n  return (\n    <Box maxWidth='xl' margin='auto'>\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path='/react-field-validation-form'>\n            <Basic />\n          </Route>\n          <Route path='/react-field-validation-form/nested'>\n            <Nested />\n          </Route>\n          <Route path='/react-field-validation-form/array'>\n            <WithArray />\n          </Route>\n          <Route path='/react-field-validation-form/async'>\n            <Async />\n          </Route>\n        </Switch>\n      </Router>\n    </Box>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, ColorModeProvider, CSSReset } from '@chakra-ui/core'\nimport App from './App'\n\nReactDOM.render(\n  <ThemeProvider>\n    <ColorModeProvider>\n      <CSSReset />\n      <App />\n    </ColorModeProvider>\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}